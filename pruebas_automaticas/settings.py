"""
Django settings for pruebas_automaticas project.

Generated by 'django-admin startproject' using Django 3.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
from common import enums

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'v4#(8o-ng&6k(s2_scbsdbh(6bsjoo(kvqk70)qw)rpt!&i2&s'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'pruebas_app',
    'bootstrap4',
    'import_export',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'pruebas_automaticas.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'pruebas_automaticas.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}



# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

MEDIA_URL = '/archivos/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'archivos')

CYPRESS_PATH = os.environ["PA_CYPRESS_PATH"]
PUPPETEER_PATH = os.environ["PA_PUPPETEER_PATH"]
CALABASH_PATH = os.environ["PA_CALABASH_PATH"]
RESEMBLE_PATH = os.environ["PA_RESEMBLE_PATH"]
ANDROID_SDK = os.environ["PA_ANDROID_SDK"]
MUTAPK_PATH = os.environ.get("PA_MUTAPK_PATH")
RUTAS_INTERNAS_SDK_ANDROID = {
    'platform-tools': 'platform-tools',
    'build-tools': os.path.join('build-tools', os.environ["PA_VERSION_ANDROID_STUDIO"])
}

RUTAS_INTERNAS = {
    'Cypress': 'cypress/integration/',
    'Calabash': 'features/',
    'Puppeteer': 'src/test/',
}

# Asi deberiamos agregar los tipos de aplicacion, asi se validan en la pagina agregar_version.html
TIPOS_APLICACION = {
    'movil': 'MÃ³vil',
    'web': 'Web',
}

# Asi deberiamos agregar los tipos de pruebas, asi se validan en la pagina agregar_prueba.html
TIPOS_PRUEBAS = {
    'e2e': 'E2E',
    'aleatorias': 'Aleatorias',
}

# Asi deberiamos agregar los tipos de herramientas, asi se validan en la pagina agregar_prueba.html
TIPOS_HERRAMIENTAS = {
    'cypress': 'Cypress',
    'calabash': 'Calabash',
    'puppeteer': 'Puppeteer',
}

# Como una mejor practica Se usan los enums para no usar diccionarios, aunque no se eliminan los primeros dado que
# el cambio es muy grande
TIPOS_HERRAMIENTAS2 = enums.Herramientas
TIPOS_PRUEBAS2 = enums.TiposPruebas
TIPOS_APLICACION2 = enums.TiposAplicacion

SQS_PUPPETEER_NAME = os.environ.get("PA_SQS_PUPPETEER_NAME")
SQS_CALABASH_NAME = os.environ.get("PA_SQS_CALABASH_NAME")
SQS_CYPRESS_NAME = os.environ.get("PA_SQS_CYPRESS_NAME")
SQS_MONKEY_MOVIL_NAME = os.environ.get("PA_SQS_MONKEY_MOVIL_NAME")
SQS_MUTACION_NAME = os.environ.get("PA_SQS_MUTACION_NAME")

AWS_ACCESS_KEY_ID = os.environ.get("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = os.environ.get("AWS_SECRET_ACCESS_KEY")

TIEMPO_ESPERA_WORKERS = 5

X_FRAME_OPTIONS = 'SAMEORIGIN'